import React, { useEffect, useState } from "react";
import { createRoot } from "react-dom/client";
import { Sun, Moon } from "lucide-react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
} from "recharts";

/*
  Fix summary:
  - Removed invalid Tailwind import from CDN (was causing build failure).
  - Added inline styles injection for a professional look without Tailwind setup.
  - Provided fallback sample data and synthetic charts for Vanry coin.
  - Ensured app runs standalone in sandbox environments.
*/

const API_URL = "https://api.coingecko.com/api/v3";

const sampleCoins = [
  {
    id: "bitcoin",
    symbol: "btc",
    name: "Bitcoin",
    current_price: 50000,
    price_change_percentage_24h: 1.23,
    image: "https://assets.coingecko.com/coins/images/1/small/bitcoin.png",
  },
  {
    id: "ethereum",
    symbol: "eth",
    name: "Ethereum",
    current_price: 3300,
    price_change_percentage_24h: -0.56,
    image: "https://assets.coingecko.com/coins/images/279/small/ethereum.png",
  },
];

const APP_CSS_ID = "crypto-app-inline-styles";
function injectStyles() {
  if (document.getElementById(APP_CSS_ID)) return;
  const css = `
:root{--bg:#f3f6fb;--card:#ffffff;--text:#0f172a;--muted:#6b7280;--accent:#2563eb;--success:#10b981;--danger:#ef4444}
.dark{--bg:#0b1220;--card:#0f1724;--text:#e6eef8;--muted:#93c5fd}
body{margin:0;font-family:Inter,system-ui,sans-serif}
.app{background:var(--bg);color:var(--text);min-height:100vh;padding:20px}
.container{max-width:1100px;margin:0 auto}
header{display:flex;align-items:center;justify-content:space-between;margin-bottom:18px}
.title{font-size:20px;font-weight:700}
.controls{display:flex;gap:12px;align-items:center}
.input{padding:10px;border-radius:8px;border:1px solid #ddd;min-width:240px}
.button{background:transparent;border:1px solid #ddd;padding:8px 10px;border-radius:8px;cursor:pointer}
.grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(240px,1fr));gap:14px}
.card{background:var(--card);padding:12px;border-radius:10px;box-shadow:0 1px 2px rgba(0,0,0,0.05);cursor:pointer;transition:box-shadow .2s}
.card:hover{box-shadow:0 6px 16px rgba(0,0,0,0.1)}
.coin-head{display:flex;align-items:center;gap:10px;margin-bottom:6px}
.coin-name{font-weight:600}
.coin-price{font-size:14px;margin:0}
.price-change{font-weight:600}
.empty{padding:24px;border-radius:10px;background:rgba(240,240,240,0.5);text-align:center;color:var(--muted)}
`; 
  const style = document.createElement("style");
  style.id = APP_CSS_ID;
  style.appendChild(document.createTextNode(css));
  document.head.appendChild(style);
}

const Input = ({ placeholder, value, onChange }) => (
  <input className="input" placeholder={placeholder} value={value} onChange={onChange} />
);

const Button = ({ children, onClick, title }) => (
  <button className="button" onClick={onClick} title={title}>{children}</button>
);

const Card = ({ children, onClick }) => (
  <div className="card" onClick={onClick}>{children}</div>
);

const CardHeader = ({ children }) => <div className="coin-head">{children}</div>;
const CardContent = ({ children }) => <div>{children}</div>;

function formatPrice(p) {
  if (p === undefined || p === null) return "—";
  if (p >= 1000) return p.toLocaleString(undefined, { maximumFractionDigits: 2 });
  return p.toFixed(4).replace(/\.?(0+)$/, "");
}

function App() {
  const [coins, setCoins] = useState(sampleCoins);
  const [filteredCoins, setFilteredCoins] = useState(sampleCoins);
  const [selectedCoin, setSelectedCoin] = useState(null);
  const [chartData, setChartData] = useState([]);
  const [darkMode, setDarkMode] = useState(false);
  const [search, setSearch] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    injectStyles();
    const rootEl = document.getElementById("root") || document.body;
    darkMode ? rootEl.classList.add("dark") : rootEl.classList.remove("dark");
  }, [darkMode]);

  useEffect(() => {
    let mounted = true;
    async function fetchCoins() {
      setLoading(true);
      try {
        const res = await fetch(`${API_URL}/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=20&page=1&sparkline=false`);
        if (!res.ok) throw new Error(`API error ${res.status}`);
        const data = await res.json();
        if (!mounted) return;
        const vany = { id: "vanry", symbol: "vanry", name: "Vanry (VANY/USDT)", current_price: 0.05, price_change_percentage_24h: 2.1, image: "https://dummyimage.com/32x32/111827/ffffff.png&text=V" };
        const merged = [vany, ...data.filter(c => c.id !== "vanry")];
        setCoins(merged);
        setFilteredCoins(merged);
      } catch (err) {
        console.warn("Fetch failed, using sample data", err);
        const vany = { id: "vanry", symbol: "vanry", name: "Vanry (VANY/USDT)", current_price: 0.05, price_change_percentage_24h: 2.1, image: "https://dummyimage.com/32x32/111827/ffffff.png&text=V" };
        const merged = [vany, ...sampleCoins];
        setCoins(merged);
        setFilteredCoins(merged);
        setError(err.message);
      } finally {
        if (mounted) setLoading(false);
      }
    }
    fetchCoins();
    return () => { mounted = false; };
  }, []);

  useEffect(() => {
    if (!search) setFilteredCoins(coins);
    else {
      const q = search.toLowerCase();
      setFilteredCoins(coins.filter(c => c.name.toLowerCase().includes(q) || c.symbol.toLowerCase().includes(q)));
    }
  }, [search, coins]);

  function syntheticChart(price = 0.05) {
    const days = 7;
    return Array.from({ length: days }, (_, i) => ({
      date: new Date(Date.now() - (days - 1 - i) * 86400000).toLocaleDateString(),
      price: +(price * (1 + Math.sin(i) * 0.05)).toFixed(6)
    }));
  }

  async function fetchChart(coin) {
    setLoading(true);
    try {
      if (coin.id === "vanry") {
        setChartData(syntheticChart(coin.current_price));
      } else {
        const res = await fetch(`${API_URL}/coins/${coin.id}/market_chart?vs_currency=usd&days=7&interval=daily`);
        const data = await res.json();
        setChartData(data.prices.map(p => ({ date: new Date(p[0]).toLocaleDateString(), price: p[1] })));
      }
    } catch (err) {
      console.warn("Chart fetch failed", err);
      setChartData(syntheticChart(coin.current_price));
    } finally {
      setLoading(false);
    }
  }

  const handleSelectCoin = (coin) => { setSelectedCoin(coin); fetchChart(coin); };

  return (
    <div className="app">
      <div className="container">
        <header>
          <div className="title">Crypto Tracker</div>
          <div className="controls">
            <Input placeholder="Search..." value={search} onChange={e => setSearch(e.target.value)} />
            <Button onClick={() => setDarkMode(s => !s)}>{darkMode ? <Sun size={16}/> : <Moon size={16}/>}</Button>
          </div>
        </header>
        {error && <div className="empty">Error: {error}</div>}
        {!selectedCoin ? (
          <div className="grid">
            {filteredCoins.map(c => (
              <Card key={c.id} onClick={() => handleSelectCoin(c)}>
                <CardHeader>
                  <img src={c.image} alt={c.name} width={28} height={28} style={{borderRadius:6}} />
                  <div>
                    <div className="coin-name">{c.name}</div>
                    <div className="coin-price">{c.symbol.toUpperCase()}</div>
                  </div>
                </CardHeader>
                <CardContent>
                  <p className="coin-price">${formatPrice(c.current_price)}</p>
                  <p className="price-change" style={{color:(c.price_change_percentage_24h||0)>=0?"var(--success)":"var(--danger)"}}>
                    {(c.price_change_percentage_24h||0).toFixed(2)}%
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <div>
            <Button onClick={() => setSelectedCoin(null)}>← Back</Button>
            <h2>{selectedCoin.name} ({selectedCoin.symbol.toUpperCase()})</h2>
            <div>Current: ${formatPrice(selectedCoin.current_price)}</div>
            <div style={{height:320}}>
              {loading ? <div className="empty">Loading chart...</div> : (
                <ResponsiveContainer width="100%" height="100%">
                  <LineChart data={chartData}>
                    <XAxis dataKey="date" hide />
                    <YAxis />
                    <Tooltip />
                    <Line type="monotone" dataKey="price" stroke="var(--accent)" dot={false}/>
                  </LineChart>
                </ResponsiveContainer>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

const rootEl = document.getElementById("root") || (() => { const el=document.createElement("div"); el.id="root"; document.body.appendChild(el); return el;})();
const root = createRoot(rootEl);
root.render(<App />);
